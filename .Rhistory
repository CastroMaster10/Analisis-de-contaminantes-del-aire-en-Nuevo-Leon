#upperLimit = q3 + 1.5 * iqr
#variable_name = paste("outliers",variables_names[i],sep="_")
#outliers <- M_CENTRO[M_CENTRO$CO < lowerLimit | M_CENTRO$CO > upperLimit,]
#outliers
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliers_table = data.frame()
q1 <- quantile(M_CENTRO$CO, 0.25)
q3 = quantile(M_CENTRO$CO,0.75)
iqr = q3 - q1
print(iqr)
#lowerLimit = q1 - 1.5 * iqr
#upperLimit = q3 + 1.5 * iqr
#variable_name = paste("outliers",variables_names[i],sep="_")
#outliers <- M_CENTRO[M_CENTRO$CO < lowerLimit | M_CENTRO$CO > upperLimit,]
#outliers
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliers_table = data.frame()
for (i in 1:length(variables_names)) {
q1 <- quantile(M_CENTRO[,i], 0.25)
q3 = quantile(M_CENTRO[,i],0.75)
iqr = q3 - q1
print(iqr)
}
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliers_table = data.frame()
for (i in 1:length(variables_names)) {
q1 <- quantile(as.list(M_CENTRO[,i]), 0.25)
q3 = quantile(as.list(M_CENTRO[,i]),0.75)
iqr = q3 - q1
print(iqr)
}
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliers_table = data.frame()
for (i in 1:length(variables_names)) {
q1 <- quantile(na.omit(M_CENTRO[,i]), 0.25)
q3 = quantile(na.omit(M_CENTRO[,i]),0.75)
iqr = q3 - q1
print(iqr)
}
install.packages("outliers")
library(readxl)
library(Hmisc)
library(gridExtra)
library(ggplot2)
library(corrplot)
library(dplyr)
library(outliers)
library(readxl)
library(Hmisc)
library(gridExtra)
library(ggplot2)
library(corrplot)
library(dplyr)
library(outliers)
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
grubbs.test(M_CENTRO$CO)
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
outliersTest$
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
outliersTest$value
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
outliersTest[1]
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
outliersTest
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
length(outliersTest)
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
outliersTest[5]
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
outliersTest[4]
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
outliersTest[3]
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest = grubbs.test(M_CENTRO$CO)
outliersTest[2]
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
for (i in 1:length(variables_names)) {
outliersTest = grubbs.test(x_pred[,i])
}
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
for (i in 1:length(variables_names)) {
outliersTest = grubbs.test(x_pred[,i])
}
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest1 = grubbs.test(x_pred$NO)
outliersTest1 = grubbs.test(x_pred$NO2)
outliersTest1 = grubbs.test(x_pred$NOX)
outliersTest1 = grubbs.test(x_pred$RH)
outliersTest1 = grubbs.test(x_pred$SR)
outliersTest1 = grubbs.test(x_pred$TOUT)
outliersTest1 = grubbs.test(x_pred$WSR)
#Detección de datos atípicos al calcular los límites de los valores atípicos utilizando IQR
outliersTest1 = grubbs.test(x_pred$NO)
outliersTest2 = grubbs.test(x_pred$NO2)
outliersTest3 = grubbs.test(x_pred$NOX)
outliersTest4 = grubbs.test(x_pred$RH)
outliersTest5 = grubbs.test(x_pred$SR)
outliersTest6 = grubbs.test(x_pred$TOUT)
outliersTest7 = grubbs.test(x_pred$WSR)
outliersTest1
scaled_X =scaled(x_pred)
scaled_X =scaled(x_pred)
scaled_X =scaled
scaled_X =scale(x_pred)
scaled_X
scaled_X =scale(x_pred)
scaled_X[1:10,]
scaled_X =scale(x_pred)
scaled_y =scale(y_pred)
scaled_X =scale(x_pred)
scaled_y =scale(y)
scaled_X[1:10,]
knitr::opts_chunk$set(echo = TRUE)
X = c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(factoextra)
library(ggplot2)
library(FactoMineR)
M = read.csv("paises_mundo.csv")
head(M)
S = cov(M)
S
c = cor(M)
c
valPropios_S = eigen(S)$values
valPropios_c = eigen(c)$values
vecPropios_S = eigen(S)$vectors
vecPropios_c = eigen(c)$vectors
cat("Valores propios de matriz varianza covarianza\n")
print(valPropios_S)
cat("Valores propios de matriz correlaciones\n")
print(valPropios_c)
cat("Vectores propios de matriz varianza covarianza\n")
print(vecPropios_S)
cat("Vectores propios de matriz correlaciones\n")
print(vecPropios_c)
diag_S =  sum(diag(S))
propVar =  eigen(S)$values / diag_S
cat("Varianza total sumando la diagonal de S: ",diag_S)
cat("\nVarianza total de los componentes sumando los valores propios: ",sum(valPropios_S))
cat("\nProporcion de varianza por cada componente:\n")
print(propVar)
plot(1:length(propVar),propVar,col="red",xlab = "Numero de Componente",ylab="Proporcion de varianza")
lines(1:length(propVar),propVar,col="blue")
acum =cumsum(propVar)
cat("Proporcion acumulada de varianza por cada componente\n")
for (x in 1:length(propVar)) {
cat("\nComponente",x,":",acum[x])
}
plot(1:length(propVar),acum,col="red",xlab = "Numero de Componente",ylab="Proporcion acumulada de varianza")
lines(1:length(propVar),acum,col="blue")
X = c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[1]
e2X = eigen(S)$vectors[2]
e1X
resS=princomp(M)
compS=as.matrix(M)%*%resS$loadings
plot(compS[,1:2],type="p", main = "A.C.P a partir de S")
text(compS[,1],compS[,2],1:nrow(compS), cex = 0.5, pos = 3, pch = 19, col = "red")
biplot(resS, cex = 0.5)
X =
cp3 = PCA(M)
fviz_pca_ind(cp3, col.ind = "blue", addEllipses = TRUE, repel = TRUE)
fviz_screeplot(cp3)
fviz_contrib(cp3, choice = c("var"))
X = c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors
e2X = eigen(S)$vectors
e1X
X = c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
e1X
X = c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
print("Componente principal 1 covarianza")
abs(e1x)
X = c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2] %*% M
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2] * M
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
library(stats)
library(factoextra)
library(ggplot2)
library(FactoMineR)
M = read.csv("paises_mundo.csv")
head(M)
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(factoextra)
library(ggplot2)
library(FactoMineR)
M = read.csv("paises_mundo.csv")
head(M)
S = cov(M)
S
c = cor(M)
c
valPropios_S = eigen(S)$values
valPropios_c = eigen(c)$values
vecPropios_S = eigen(S)$vectors
vecPropios_c = eigen(c)$vectors
cat("Valores propios de matriz varianza covarianza\n")
print(valPropios_S)
cat("Valores propios de matriz correlaciones\n")
print(valPropios_c)
cat("Vectores propios de matriz varianza covarianza\n")
print(vecPropios_S)
cat("Vectores propios de matriz correlaciones\n")
print(vecPropios_c)
diag_S =  sum(diag(S))
propVar =  eigen(S)$values / diag_S
cat("Varianza total sumando la diagonal de S: ",diag_S)
cat("\nVarianza total de los componentes sumando los valores propios: ",sum(valPropios_S))
cat("\nProporcion de varianza por cada componente:\n")
print(propVar)
plot(1:length(propVar),propVar,col="red",xlab = "Numero de Componente",ylab="Proporcion de varianza")
lines(1:length(propVar),propVar,col="blue")
acum =cumsum(propVar)
cat("Proporcion acumulada de varianza por cada componente\n")
for (x in 1:length(propVar)) {
cat("\nComponente",x,":",acum[x])
}
plot(1:length(propVar),acum,col="red",xlab = "Numero de Componente",ylab="Proporcion acumulada de varianza")
lines(1:length(propVar),acum,col="blue")
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
resS=princomp(M)
compS=as.matrix(M)%*%resS$loadings
plot(compS[,1:2],type="p", main = "A.C.P a partir de S")
text(compS[,1],compS[,2],1:nrow(compS), cex = 0.5, pos = 3, pch = 19, col = "red")
biplot(resS, cex = 0.5)
X =
cp3 = PCA(M)
fviz_pca_ind(cp3, col.ind = "blue", addEllipses = TRUE, repel = TRUE)
fviz_screeplot(cp3)
fviz_contrib(cp3, choice = c("var"))
c=x()
c=X()
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1] %*% X
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1] * X
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1] * t(X)
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = t(eigen(S)$vectors[,1]) * X
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
MATRIZ
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
M
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
as.matrix(M)
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
t(as.matrix(M))
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
MATRIZ %*% t(as.matrix(M))
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
MATRIZ * t(as.matrix(M))
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
DIM(MATRIZ)
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
dim(MATRIZ)
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
dim(MATRIZ)
dim(M)
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
dim(MATRIZ)
dim(t(as.matrix(M)))
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
dim(t(MATRIZ))
dim(t(as.matrix(M)))
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
t(MATRIZ) %*% t(as.matrix(M))
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
t(MATRIZ) * t(as.matrix(M))
X=c()
for (i in 1:length(colnames(M))) {
X[length(X) + 1] = M[i]
}
e1X = eigen(S)$vectors[,1]
e2X = eigen(S)$vectors[,2]
MATRIZ = cbind(e1X,e2X)
print("Componente principal 1 covarianza")
abs(e1X)
print("Componente 2 covarianza")
abs(e2X)
t(MATRIZ) %*% t(as.matrix(M))
