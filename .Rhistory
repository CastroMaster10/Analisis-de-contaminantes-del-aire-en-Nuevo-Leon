table(pred=predicted$class, true=X_final$y)
# porcentaje de observaciones clasificadas correctamente
mean(predicted$class==X$y)
#Asignamos un color a cada especie
lookup=c("1"='green',"2"='yellow', "3"='orange',"4" = "red",'5'='purple')
#Creamos un vector con el color corresponidente a cada observacion de acuerdo a la columna Species
col.ind=lookup[X_final$y]
#Graficos de dispersion con el color de acuerdo al tipo de especie
plot(X_final[,-ncol(X_final)][-5], pch=21, bg=col.ind, col="gray")
#Asignamos un color a cada especie
lookup=c("1"='green',"2"='yellow', "3"='orange',"4" = "red",'5'='purple')
#Creamos un vector con el color corresponidente a cada observacion de acuerdo a la columna Species
col.ind=lookup[X_final$y]
#Graficos de dispersion con el color de acuerdo al tipo de especie
plot(X_final[,-ncol(X_final)][-5], pch=21, bg=col.ind, col="gray")
# Agregar cuadricula
grid()
# Agregar leyenda
legend("topright", legend = c("Buena", "Aceptable","Mala","Muy Mala","Extremadamente Mala"), col = class_colors, lwd = 2,cex=0.7)
rot = c("none", "varimax")
bi_mod = function(tipo){
biplot.psych(principal(X_new,nfactors = 4,rotate = tipo),main = "",col=c(2,3,4),pch = c(21,18))}
sapply(rot,bi_mod)
rot = c("none", "varimax")
bi_mod = function(tipo){
biplot.psych(principal(X_new,nfactors = 2,rotate = tipo),main = "",col=c(2,3,4),pch = c(21,18))}
sapply(rot,bi_mod)
modelo1 = principal(R, nfactors =2, rotate = "varimax")   # de máxima PCA
M1_commd = sort(modelo1$communality,decreasing = T)
plot(1:length(M1_commd),M1_commd,col="blue",ylab = "Proporcion de comm",xlab = "Variable",main="Criterio de componentes principales",xaxt = "n")
lines(1:length(M1_commd), M1_commd, col = "red", type = "l")
axis(1, at = 1:ncol(R), labels = colnames(R),las = 2)
t(M1_commd)
modelo1$loadings #criterio de Componentes principales
modelo1 = principal(R, nfactors =4, rotate = "varimax")   # de máxima PCA
M1_commd = sort(modelo1$communality,decreasing = T)
plot(1:length(M1_commd),M1_commd,col="blue",ylab = "Proporcion de comm",xlab = "Variable",main="Criterio de componentes principales",xaxt = "n")
lines(1:length(M1_commd), M1_commd, col = "red", type = "l")
axis(1, at = 1:ncol(R), labels = colnames(R),las = 2)
t(M1_commd)
modelo1$loadings #criterio de Componentes principales
knitr::opts_chunk$set(echo = TRUE)
# Visualiza la matriz de correlación utilizando corrplot
corrplot(cor_matrix, method = "circle")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(Hmisc)
library(gridExtra)
library(ggplot2)
library(corrplot)
library(dplyr)
library(outliers)
library(zoo)
library(MASS)
library(psych)
library(stats)
library(factoextra)
library(FactoMineR)
library(rgl)
sheet_names = excel_sheets("datos2022_2023_estaciones.xlsx")
for (i in 1:length(sheet_names)) {
variable_name = paste("M",sheet_names[i],sep="_")
value = read_excel("datos2022_2023_estaciones.xlsx",sheet = sheet_names[i])
assign(variable_name,value) #guardamos cada hoja en una variable
}
cat("Número de observaciones:",dim(M_CENTRO)[1])
cat("\nNúmero de variables:",dim(M_CENTRO)[2])
cat("Tipo dato de cada variable\n")
t(sapply(M_CENTRO,class))
summary(M_CENTRO)
variables_names = colnames(M_CENTRO)
M_CENTRO[,2:length(variables_names)] = sapply(M_CENTRO[,2:length(variables_names)],as.numeric)
t(sapply(M_CENTRO,class))
cat("Valores únicos por cada variable\n")
for (i in 1:length(variables_names)) {
cat("\n-",variables_names[i],":",length(unique(sapply(M_CENTRO [,i],as.list)))) #Transformamos las columnas a vectores para poder calcular sus valores únicos
}
cat("\nNúmero de valores nulos (NA) por variable")
for (i in 1:length(variables_names)){
cat(cat("\n-",variables_names[i],":",length(which(is.na(M_CENTRO[,i]),arr.ind=TRUE))))
}
summary(M_CENTRO)
#Desviacion estandar por variable
cat("Desviacion estandar por variable")
for (i in 1:length(variables_names)) {
cat(cat("\n-",variables_names[i],":",sapply(M_CENTRO[,i],var))) #omitimos los valores faltantes
}
#Desviacion estandar por variable
cat("Desviacion estandar por variable")
for (i in 1:length(variables_names)) {
cat(cat("\n-",variables_names[i],":",sapply(na.omit(M_CENTRO[,i]),var)))
}
#Histograma
list <-lapply(1:ncol(M_CENTRO),
function(col) ggplot2::qplot(M_CENTRO[[col]],
geom = "histogram",
binwidth = 1))
cowplot::plot_grid(plotlist = list)
par(mfrow = c(2, 4)) #Despliega los boxplot en una sola hoja
for (col in variables_names) {
boxplot(na.omit(M_CENTRO[[col]]), main = col)
}
cor_matrix = cor(na.omit(M_CENTRO[,2:length(variables_names)]))
cor_matrix
# Visualiza la matriz de correlación utilizando corrplot
corrplot(cor_matrix, method = "circle")
cat("\nNúmero de valores nulos (NA) por variable")
props_NA = c()
for (i in 1:length(variables_names)){
prop = length(which(is.na(M_CENTRO[,i]),arr.ind=TRUE)) / nrow(M_CENTRO)
cat("\n-",variables_names[i],":",prop)
props_NA[length(props_NA) + 1] = prop
}
plot(1:length(variables_names),props_NA,col="blue",xlab="Variables",ylab="Porcentaje",main="Porcentaje de Valores faltantes")
abline(h=mean(props_NA ),col="red")  #media de valores faltantes
summary(M_CENTRO)
selected_names = c("PM10","PM2.5","SO2","O3","NO","CO","NO2","NOX","RH","SR","TOUT","WSR")
x_pred = M_CENTRO[,selected_names]
head(x_pred)
#Crear una variable de hora
hour = c()
for (i in 1:length(M_CENTRO$date)){
parsed_timestamp = strptime(M_CENTRO$date[i],format = "%Y-%m-%d %H:%M:%S")
hour[length(hour) + 1] = parsed_timestamp$hour #Obtenemos la hora
}
x_pred$Hour =  hour
x_pred$Hour[is.na(x_pred$Hour)] = 0 #Reemplazamos los valores NA por el cero, el ciclo no lo detecto
#Crear una variable de dia
dayCounter = 1
dias = c()
for (i in 1:length(M_CENTRO$date)){
parsed_timestamp = strptime(M_CENTRO$date[i],format = "%Y-%m-%d %H:%M:%S")
#Reemplaazamos el valor NA por el dia correspondiente
day = dayCounter
dayCounter  =dayCounter + 1
day = parsed_timestamp$mday #
dias[length(dias) + 1] = day #dia
}
for (i in 1:length(dias)) {
if(is.na(dias[i])) {
dias[i] =  dias[i + 1] #Reemplazamos los NA con el mes que corresponden
}
}
x_pred$Day =  dias
#Crear una variable de mes
mesCounter = 1
meses = c()
for (i in 1:length(M_CENTRO$date)){
parsed_timestamp = strptime(M_CENTRO$date[i],format = "%Y-%m-%d %H:%M:%S")
#Reemplaazamos el valor NA por el dia correspondiente
mes = mesCounter
mesCounter  =mesCounter + 1
mes = as.numeric(format(parsed_timestamp, format = "%m"))
meses[length(meses) + 1] = mes #mes
}
for (i in 1:length(meses)) {
if(is.na(meses[i])) {
meses[i] =  meses[i + 1] #Reemplazamos los NA con el mes que corresponden
}
}
x_pred$Month = meses
promediosContaminantes =function(contaminantes) {
intervalos = c(12,12,1,1,24,8,1,1,1,1,1,1)
for (i in 1:ncol(contaminantes)) {
contaminante = contaminantes[,i]
intervalo = intervalos[i]
contaminantes[,i] = rollapply(contaminante, width = intervalo, FUN = function(x) weighted.mean(x, w = seq_along(x)), align = "right", fill = NA)
}
return(contaminantes)
}
promediosTabla1 =  data.frame(PM10_12horas = x_pred$PM10,
PM2.5_12horas = x_pred$PM2.5,
O3_1hora = x_pred$O3 /1000, #Convertimos las unidades de ppb a ppm
NO2_1hora = x_pred$NO2 / 1000,
SO2_24horas = x_pred$SO2 / 1000,
CO_8horas = x_pred$CO,
NO_1hora = x_pred$NO / 1000,
NOX_1hora = x_pred$NOX / 1000,
RH_1hora = x_pred$RH,
SR_1hora = x_pred$SR,
TOUT_1hora = x_pred$TOUT,
WSR_1hora = x_pred$WSR
)
promediosTabla = promediosContaminantes(na.omit(promediosTabla1))
#promediosTabla = cbind(M_CENTRO$date, promediosTabla)
head(promediosTabla)
dim(promediosTabla)
#Categorizamos la calidad del aire en base a los promedios moviles ponderados de los contaminante. Se tienen que cumplir todos ellos
#calidad PM10 promedio movil ponderado de 12 horas
calidadPM10 = function(contaminante) {
calidades = c()
for (j in 1:length(contaminante)) {
if (!is.na(contaminante[j]) && contaminante[j] <= 50) {
calidades[length(calidades) + 1] = 1
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 50 & contaminante[j] <= 75)) {
calidades[length(calidades) + 1] = 2
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 75 & contaminante[j] <= 155)) {
calidades[length(calidades) + 1] = 3
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 155 & contaminante[j] <= 235)) {
calidades[length(calidades) + 1] = 4
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 236)) {
calidades[length(calidades) + 1] = 5
}
else if(is.na(contaminante[j])) {
calidades[length(calidades) + 1] = 0 #inclasificable
}
}
return(calidades)
}
#Calidad PM2.5 promedio movil ponderado de 12 horas
calidadPM2.5 = function(contaminante) {
calidades = c()
for (j in 1:length(contaminante)) {
if (!is.na(contaminante[j]) && contaminante[j] <= 25) {
calidades[length(calidades) + 1] = 1
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 25 & contaminante[j] <= 45)) {
calidades[length(calidades) + 1] = 2
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 45 & contaminante[j] <= 79)) {
calidades[length(calidades) + 1] = 3
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 79 & contaminante[j] <= 147)) {
calidades[length(calidades) + 1] = 4
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 147)) {
calidades[length(calidades) + 1] = 5
}
else if(is.na(contaminante[j])) {
calidades[length(calidades) + 1] = 0 #inclasificable
}
}
return(calidades)
}
#Calidad 03 1 hora
calidadO3 = function(contaminante) {
calidades = c()
for (j in 1:length(contaminante)) {
if (!is.na(contaminante[j]) && contaminante[j] <= 0.051) {
calidades[length(calidades) + 1] = 1
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.051 & contaminante[j] <= 0.095)) {
calidades[length(calidades) + 1] = 2
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.095 & contaminante[j] <= 0.135)) {
calidades[length(calidades) + 1] = 3
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.135 & contaminante[j] <= 0.175)) {
calidades[length(calidades) + 1] = 4
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.175)) {
calidades[length(calidades) + 1] = 5
}
else if(is.na(contaminante[j])) {
calidades[length(calidades) + 1] = 0 #inclasificable
}
}
return(calidades)
}
#Calidad NO2 promedio de una hora
calidadNO2 = function(contaminante) {
calidades = c()
for (j in 1:length(contaminante)) {
if (!is.na(contaminante[j]) && contaminante[j] <= 0.107) {
calidades[length(calidades) + 1] = 1
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.107 & contaminante[j] <= 0.210)) {
calidades[length(calidades) + 1] = 2
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.210 & contaminante[j] <= 0.230)) {
calidades[length(calidades) + 1] = 3
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.230 & contaminante[j] <= 0.250)) {
calidades[length(calidades) + 1] = 4
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.250)) {
calidades[length(calidades) + 1] = 5
}
else if(is.na(contaminante[j])) {
calidades[length(calidades) + 1] = 0 #inclasificable
}
}
return(calidades)
}
#Calidad de SO2 promedio movil de 24 horas
calidadSO2 = function(contaminante) {
calidades = c()
for (j in 1:length(contaminante)) {
if (!is.na(contaminante[j]) && contaminante[j] <= 0.008) {
calidades[length(calidades) + 1] = 1
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.008 & contaminante[j] <= 0.110)) {
calidades[length(calidades) + 1] = 2
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.110 & contaminante[j] <= 0.165)) {
calidades[length(calidades) + 1] = 3
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.165 & contaminante[j] <= 0.220)) {
calidades[length(calidades) + 1] = 4
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 0.220)) {
calidades[length(calidades) + 1] = 5
}
else if(is.na(contaminante[j])) {
calidades[length(calidades) + 1] = 0 #inclasificable
}
}
return(calidades)
}
#Calidad de CO promedio movil de ocho horas
calidadCO = function(contaminante) {
calidades = c()
for (j in 1:length(contaminante)) {
if (!is.na(contaminante[j]) && contaminante[j] <= 8.75) {
calidades[length(calidades) + 1] = 1
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 8.75 & contaminante[j] <= 11)) {
calidades[length(calidades) + 1] = 2
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 11 & contaminante[j] <= 13.3)) {
calidades[length(calidades) + 1] = 3
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 13.3 & contaminante[j] <= 15.5)) {
calidades[length(calidades) + 1] = 4
}
else if(!is.na(contaminante[j]) && (contaminante[j] > 15.5)) {
calidades[length(calidades) + 1] = 5
}
else if(is.na(contaminante[j])) {
calidades[length(calidades) + 1] = 0 #inclasificable
}
}
return(calidades)
}
calidadpm_2.5 = calidadPM2.5(promediosTabla$PM2.5_12horas)
calidadpm_10 = calidadPM10(promediosTabla$PM10_12horas)
calidad_O3 = calidadO3(promediosTabla$O3_1hora)
calidad_NO2  = calidadNO2(promediosTabla$NO2_1hora)
calidad_SO2 = calidadSO2(promediosTabla$SO2_24horas)
calidad_CO = calidadCO(promediosTabla$CO_8horas)
y = c() #variable predictora
for (i in 1:length(calidadpm_2.5)) {
vec_calidades = c(calidadpm_2.5[i],calidadpm_10[i],calidad_O3[i],calidad_NO2[i],calidad_SO2[i],calidad_CO[i])
y[length(y) + 1] = max(vec_calidades)
}
#Tratamiento de valores faltantes
x_pred = na.exclude(x_pred)
x_names = colnames(x_pred)
cat("\nNúmero de valores nulos (NA) por variable")
for (i in 1:length(x_names)){
cat(cat("\n-",x_names[i],":",length(which(is.na(x_pred[,i]),arr.ind=TRUE))))
}
#Creamos una matriz de datos completa incluyendo las variables predictoras y la dependiente ahora que eliminamos lo valores faltantes de las variables predictoras seleccionadas
X = cbind(x_pred,y)
head(X)
cat("Valores únicos por cada variable\n")
for (i in 1:length(selected_names)) {
cat("\n-",selected_names[i],":",length(unique(sapply(X[,i],as.list)))) #Transformamos las columnas a vectores para poder calcular sus valores únicos
}
cat("\n\nNumero de observaciones totales: ",dim(X)[1])
X =  distinct(X)
cat("\n\nNumero de observaciones totales: ",dim(X)[1])
t(sapply(X,class))
head(X)
X$O3 = X$O3 / 1000 #ppb A ppm
X$NO2 = X$NO2 / 1000
X$SO2 = X$SO2 / 1000
X$NO = X$NO / 1000
X$NOX = X$NOX / 1000
head(X)
#Valores y vectores propios
X_new = X[,-ncol(X)] #SELECCIONAMOS SOLAMENTE LAS VARIABLES PREDICTORAS
S = cov(X_new)
valPropios = eigen(S)$values
vecPropios =eigen(S)$vectors
cat("Valores propios\n")
print(valPropios)
cat("Vectores propios\n")
print(vecPropios)
#Porcentaje de varianza explicada
propVar =   valPropios / sum(diag(S))
cat("Varianza total sumando la diagonal de S: ", sum(diag(S)))
cat("\nVarianza total de los componentes sumando los valores propios: ",sum(valPropios))
cat("\nProporcion de varianza por cada componente:\n")
print(propVar)
plot(1:length(propVar),propVar,col="red",xlab = "Numero de Componente",ylab="Proporcion de varianza explicada")
lines(1:length(propVar),propVar,col="blue")
#Componentes principales: metodo 2
pca = prcomp(X_new, scale=FALSE) #escalamos los datos para que sean comparables
summary(pca)
#Componentes principales: metodo
pca$x[1:10,]
princomp(X_new)$loadings
resS=princomp(X_new)
compS=as.matrix(X_new)%*%resS$loadings
plot(compS[,1:2],type="p", main = "A.C.P a partir de S") #Seleccionamos los primeros dos componentes
text(compS[,1],compS[,2],1:nrow(compS), cex = 0.5, pos = 3, pch = 19, col = "red")
biplot(resS, cex = 0.5)
resS=princomp(X_new)
compS=as.matrix(X_new)%*%resS$loadings
plot(compS[,3:4],type="p", main = "A.C.P a partir de S") #Seleccionamos los componentes 3 y 4
text(compS[,3],compS[,4],1:nrow(compS), cex = 0.5, pos = 3, pch = 19, col = "red")
biplot(resS, cex = 0.5)
cp3 = PCA(X_new)
fviz_pca_ind(cp3, col.ind = "blue", addEllipses = TRUE, repel = TRUE)
fviz_screeplot(cp3)
fviz_contrib(cp3, choice = c("var"))
bartlett.test(X_new)
#Prueba de KMO
R =  cor(X_new)
K = KMO(X_new)
K
scree(R)
modelo1 = principal(R, nfactors =4, rotate = "varimax")   # de máxima PCA
M1_commd = sort(modelo1$communality,decreasing = T)
plot(1:length(M1_commd),M1_commd,col="blue",ylab = "Proporcion de comm",xlab = "Variable",main="Criterio de componentes principales",xaxt = "n")
lines(1:length(M1_commd), M1_commd, col = "red", type = "l")
axis(1, at = 1:ncol(R), labels = colnames(R),las = 2)
t(M1_commd)
rot = c("none", "varimax")
bi_mod = function(tipo){
biplot.psych(principal(X_new,nfactors = 2,rotate = tipo),main = "",col=c(2,3,4),pch = c(21,18))}
sapply(rot,bi_mod)
modelo1$loadings #criterio de Componentes principales
F1 =  0.673 * X_new$PM10 + 0.738 * X_new$PM2.5 + 0.485 * X_new$SO2 - 0.110 * X_new$O3  + 0.773 * X_new$NO + 0.264 * X_new$CO + 0.847 * X_new$NO2 + 0.912 * X_new$NOX - 0.104 * X_new$RH + 0.232 * X_new$SR - 0.194 * X_new$TOUT - 0.387 * X_new$WSR
F2 =  0.259 * X_new$PM10 + 0.0264 * X_new$PM2.5 + 0.2098 * X_new$SO2 + 0.8622 * X_new$O3  - 0.2654 * X_new$NO - 0.0255 * X_new$CO - 0.2634 * X_new$NO2 - 0.2972 * X_new$NOX - 0.7387 * X_new$RH + 0.7032 * X_new$SR + 0.6974 * X_new$TOUT + 0.7221 * X_new$WSR + 0.5194 * X_new$Hour + 0.0292 * X_new$Day
F3 =  -0.183 * X_new$PM10 - 0.028 * X_new$PM2.5 - 0.1389 * X_new$SO2 - 0.0188 * X_new$O3  + 0.1336 * X_new$NO - 0.3437 * X_new$CO - 0.1241 * X_new$NO2 + 0.0032 * X_new$NOX + 0.2687 * X_new$RH + 0.1999 * X_new$SR + 0.3286 * X_new$TOUT - 0.03798 * X_new$WSR - 0.1087 * X_new$Hour - 0.054 * X_new$Day +0.9059 *  X_new$Month
F4 =  0.186 * X_new$PM10 + 0.353 * X_new$PM2.5 - 0.0635 * X_new$SO2 + 0.0584 * X_new$O3  - 0.0523 * X_new$NO + 0.58851 * X_new$CO - 0.0631 * X_new$NO2 - 0.0649* X_new$NOX + 0.2355 * X_new$RH + 0.1517 * X_new$SR + 0.2024 * X_new$TOUT - 0.02437 * X_new$WSR - 0.2305 * X_new$Hour - 0.6582 * X_new$Day - 0.0829 *  X_new$Month
#Colors
class_colors = c("green","yellow","orange","red","purple")
# Map class labels to colors
point_colors = class_colors[match(y,c(1,2,3,4,5))]
# Open a 3D plotting window
open3d()
# Create the scatter plot
plot3d(F1, F2, F3, col =point_colors ,size = 4)
# Add labels
axes3d(labels = c("X-axis", "Y-axis", "Z-axis"))
# Optionally, add a title
title3d("3D Scatter Plot")
plot(F1,F2,col=point_colors,main="Clases de contaminantes descritos por F1 y F2")
# Agregar cuadricula
grid()
# Agregar leyenda
legend("topright", legend = c("Buena", "Aceptable","Mala","Muy Mala","Extremadamente Mala"), col = class_colors, lwd = 2,cex=0.7)
# Visualiza la matriz de correlación utilizando
cor_matrix = cor(X_new)
corrplot(cor_matrix, method = "circle")
X_final = data.frame(Factor1=F1,Factor2=F2,Factor3=F3,Factor4=F4)
X_final$y = X$y
head(X_final,10)
#Asignamos un color a cada especie
lookup=c("1"='green',"2"='yellow', "3"='orange',"4" = "red",'5'='purple')
#Creamos un vector con el color corresponidente a cada observacion de acuerdo a la columna Species
col.ind=lookup[X_final$y]
#Graficos de dispersion con el color de acuerdo al tipo de especie
plot(X_final[,-ncol(X_final)][-5], pch=21, bg=col.ind, col="gray")
# Agregar cuadricula
grid()
# Agregar leyenda
legend("topright", legend = c("Buena", "Aceptable","Mala","Muy Mala","Extremadamente Mala"), col = class_colors, lwd = 2,cex=0.7)
lda_model=lda(y~.,data=X_final)
#output
lda_model
predicted=predict(lda_model)
head(predicted$x)
par(mar = c(1, 1, 1, 1))  # Ajusta los márgenes izquierdo, derecho, superior e inferior
ldahist(data=predicted$x[,1],g=X_final$y, main="Histograma de la función discriminante LD1")
ldahist(data=predicted$x[,2],g=X_final$y, main="Histograma de la función discriminante LD2")
ldahist(data=predicted$x[,3],g=X_final$y, main="Histograma de la función discriminante LD2")
ldahist(data=predicted$x[,4],g=X_final$y, main="Histograma de la función discriminante LD2")
table(pred=predicted$class, true=X_final$y)
# porcentaje de observaciones clasificadas correctamente
mean(predicted$class==X$y)
# Visualiza la matriz de correlación utilizando
X_final = cbind(X_new,y)
cor_matrix = cor(X_final)
corrplot(cor_matrix, method = "circle")
cor_matrix
X_final = X_final[,c("PM10","PM2.5","NOX","RH","y")]
head(X_final,10)
#Asignamos un color a cada especie
lookup=c("1"='green',"2"='yellow', "3"='orange',"4" = "red",'5'='purple')
#Creamos un vector con el color corresponidente a cada observacion de acuerdo a la columna Species
col.ind=lookup[X_final$y]
#Graficos de dispersion con el color de acuerdo al tipo de especie
plot(X_final[,-ncol(X_final)][-5], pch=21, bg=col.ind, col="gray")
# Agregar cuadricula
grid()
# Agregar leyenda
legend("topright", legend = c("Buena", "Aceptable","Mala","Muy Mala","Extremadamente Mala"), col = class_colors, lwd = 2,cex=0.7)
head(X_final)
lda_model=lda(y~.,data=X_final)
#output
lda_model
predicted=predict(lda_model)
head(predicted$x)
par(mar = c(1, 1, 1, 1))  # Ajusta los márgenes izquierdo, derecho, superior e inferior
ldahist(data=predicted$x[,1],g=X_final$y, main="Histograma de la función discriminante LD1")
ldahist(data=predicted$x[,2],g=X_final$y, main="Histograma de la función discriminante LD2")
ldahist(data=predicted$x[,3],g=X_final$y, main="Histograma de la función discriminante LD2")
ldahist(data=predicted$x[,4],g=X_final$y, main="Histograma de la función discriminante LD2")
table(pred=predicted$class, true=X_final$y)
# porcentaje de observaciones clasificadas correctamente
mean(predicted$class==X$y)
table(pred=predicted$class, true=X_final$y)
# porcentaje de observaciones clasificadas correctamente
mean(predicted$class==X$y)
